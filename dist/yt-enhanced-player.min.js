var e, t;
(e = "undefined" != typeof window ? window : this),
  (t = function () {
    function e() {
      return new Promise((e, t) => {
        if (window.YT && YT.Player) return void e();
        const i = document.createElement("script");
        (i.src = "https://www.youtube.com/iframe_api"),
          (i.onload = () => {
            !(function (e) {
              const t = setInterval(() => {
                window.YT && YT.Player && (clearInterval(t), e());
              }, 100);
            })(e);
          }),
          (i.onerror = (e) => t(e)),
          document.body.appendChild(i);
      });
    }
    return {
      YouTubePlayerPlugin: class {
        constructor(e, t = {}) {
          if (
            ((this.containerId = e),
            (this.options = t),
            (this.player = null),
            !this.options.videoId)
          )
            throw new Error("A videoId must be provided.");
          this.initialize();
        }
        initialize() {
          e().then(() => this.loadYouTubeAPI());
        }
        loadYouTubeAPI() {
          "undefined" != typeof YT && YT.Player
            ? this.player ||
              (this.player = new YT.Player(this.containerId, this.options))
            : console.error("YouTube API is not ready.");
        }
        changeVideo(e) {
          this.player &&
            this.player.loadVideoById &&
            this.player.loadVideoById(e);
        }
      },
      YouTubePlayerWithPlaylistPlugin: class {
        constructor(e, t = {}) {
          if (
            ((this.containerId = e),
            (this.options = t),
            (this.player = null),
            (this.playlist = this.options.playlist || []),
            (this.currentIndex = 0),
            (this.loopMode = this.options.loopMode || "none"),
            (this.onVideoChange = this.options.onVideoChange || null),
            !this.playlist.length)
          )
            throw new Error(
              "A playlist with at least one video must be provided."
            );
          this.initialize();
        }
        initialize() {
          e().then(() => this.loadYouTubeAPI());
        }
        loadYouTubeAPI() {
          "undefined" != typeof YT && YT.Player
            ? this.player ||
              (this.player = new YT.Player(this.containerId, {
                videoId: this.getCurrentVideoId(),
                events: {
                  onReady: (e) => this.onPlayerReady(e),
                  onStateChange: (e) => this.onPlayerStateChange(e)
                }
              }))
            : console.error("YouTube API is not ready.");
        }
        onPlayerReady(e) {
          "function" == typeof this.onVideoChange &&
            this.onVideoChange(this.playlist[this.currentIndex]);
        }
        onPlayerStateChange(e) {
          if (e.data === YT.PlayerState.ENDED)
            switch (this.loopMode) {
              case "video":
                this.playVideo(this.currentIndex);
                break;
              case "playlist":
                this.currentIndex < this.playlist.length - 1 &&
                  this.nextVideo();
                break;
              case "playlist-loop":
                this.nextVideo(!0);
            }
        }
        playVideo(e) {
          e >= 0 &&
            e < this.playlist.length &&
            ((this.currentIndex = e),
            this.player.loadVideoById(this.playlist[this.currentIndex].videoId),
            "function" == typeof this.onVideoChange &&
              this.onVideoChange(this.playlist[this.currentIndex]));
        }
        nextVideo(e = !1) {
          this.currentIndex < this.playlist.length - 1
            ? this.playVideo(this.currentIndex + 1)
            : e && this.playVideo(0);
        }
        previousVideo() {
          this.currentIndex > 0 && this.playVideo(this.currentIndex - 1);
        }
        setLoopMode(e) {
          if (!["none", "video", "playlist", "playlist-loop"].includes(e))
            throw new Error("Invalid loop mode.");
          this.loopMode = e;
        }
        static generateShuffledPlaylist(e) {
          const t = [...e];
          for (let e = t.length - 1; e > 0; e--) {
            const i = Math.floor(Math.random() * (e + 1));
            [t[e], t[i]] = [t[i], t[e]];
          }
          return t;
        }
        getCurrentVideoId() {
          return this.playlist[this.currentIndex]?.videoId;
        }
        getCurrentIndex() {
          return this.currentIndex;
        }
        canGoToPreviousVideo() {
          return this.currentIndex > 0;
        }
        canGoToNextVideo() {
          return this.currentIndex < this.playlist.length - 1;
        }
      }
    };
  }),
  "object" == typeof module && "object" == typeof module.exports
    ? (module.exports = t())
    : (e.YTEnhancedPlayer = t());
